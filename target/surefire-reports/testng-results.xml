<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="69" passed="65" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-12-15T11:04:55 IST" name="Suite" finished-at="2023-12-15T11:05:20 IST" duration-ms="24684">
    <groups>
    </groups>
    <test started-at="2023-12-15T11:04:55 IST" name="Test" finished-at="2023-12-15T11:05:20 IST" duration-ms="24684">
      <class name="testcases.PriorityFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:16 IST" name="baseURL" finished-at="2023-12-15T11:05:16 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddPriorityWithoutAuthorization()[pri:1, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:16 IST" name="verifyAddPriorityWithoutAuthorization" finished-at="2023-12-15T11:05:16 IST" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddPriorityWithoutAuthorization -->
        <test-method signature="verifyGetAllPriorityWithoutAuthorization()[pri:2, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:16 IST" name="verifyGetAllPriorityWithoutAuthorization" finished-at="2023-12-15T11:05:16 IST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllPriorityWithoutAuthorization -->
        <test-method signature="updatePriorityWithoutAuthorization()[pri:3, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:16 IST" name="updatePriorityWithoutAuthorization" finished-at="2023-12-15T11:05:16 IST" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithoutAuthorization -->
        <test-method signature="verifyAddPriorityWithAuthorization()[pri:5, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:16 IST" name="verifyAddPriorityWithAuthorization" finished-at="2023-12-15T11:05:17 IST" duration-ms="808" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddPriorityWithAuthorization -->
        <test-method signature="addPriorityWithSamePayloadAsPrevious()[pri:6, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:17 IST" name="addPriorityWithSamePayloadAsPrevious" finished-at="2023-12-15T11:05:17 IST" duration-ms="444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addPriorityWithSamePayloadAsPrevious -->
        <test-method signature="addPriorityWithInvalidPayload()[pri:7, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:17 IST" name="addPriorityWithInvalidPayload" finished-at="2023-12-15T11:05:18 IST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addPriorityWithInvalidPayload -->
        <test-method signature="verifyGetAllPriorityWithAuthorization()[pri:8, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:18 IST" name="verifyGetAllPriorityWithAuthorization" finished-at="2023-12-15T11:05:18 IST" duration-ms="380" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllPriorityWithAuthorization -->
        <test-method signature="updatePriorityWithAuthorization()[pri:9, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:18 IST" name="updatePriorityWithAuthorization" finished-at="2023-12-15T11:05:18 IST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithAuthorization -->
        <test-method signature="updatePriorityWithoutGivingPriorityId()[pri:10, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:18 IST" name="updatePriorityWithoutGivingPriorityId" finished-at="2023-12-15T11:05:19 IST" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithoutGivingPriorityId -->
        <test-method signature="updatePriorityByGivingNonExistingPriorityId()[pri:11, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:19 IST" name="updatePriorityByGivingNonExistingPriorityId" finished-at="2023-12-15T11:05:19 IST" duration-ms="389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityByGivingNonExistingPriorityId -->
        <test-method signature="deleteSinglePriorityWithInvalidPriorityName()[pri:13, instance:testcases.PriorityFolder@35d6ca49]" started-at="2023-12-15T11:05:19 IST" name="deleteSinglePriorityWithInvalidPriorityName" finished-at="2023-12-15T11:05:20 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSinglePriorityWithInvalidPriorityName -->
      </class> <!-- testcases.PriorityFolder -->
      <class name="testcases.StatusFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="baseURL" finished-at="2023-12-15T11:05:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddStatusWithoutAuthorization()[pri:1, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="verifyAddStatusWithoutAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddStatusWithoutAuthorization -->
        <test-method signature="verifyGetAllStatusWithoutAuthorization()[pri:2, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="verifyGetAllStatusWithoutAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllStatusWithoutAuthorization -->
        <test-method signature="verifyUpdateStatusWithoutAuthorization()[pri:3, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="verifyUpdateStatusWithoutAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdateStatusWithoutAuthorization -->
        <test-method signature="deleteSingleStatusWithoutAuthorization()[pri:4, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="deleteSingleStatusWithoutAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleStatusWithoutAuthorization -->
        <test-method signature="verifyAddStatusWithAuthorization()[pri:5, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="verifyAddStatusWithAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="603" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Status Already Exits] but found [Status Already Exists]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Status Already Exits] but found [Status Already Exists]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.StatusFolder.verifyAddStatusWithAuthorization(StatusFolder.java:122)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddStatusWithAuthorization -->
        <test-method signature="addStatusWithSamePayloadAsPrevious()[pri:6, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:00 IST" name="addStatusWithSamePayloadAsPrevious" finished-at="2023-12-15T11:05:01 IST" duration-ms="488" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithSamePayloadAsPrevious -->
        <test-method signature="addStatusWithInvalidPayload()[pri:7, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:01 IST" name="addStatusWithInvalidPayload" finished-at="2023-12-15T11:05:01 IST" duration-ms="577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithInvalidPayload -->
        <test-method signature="verifyGetAllStatusWithAuthorization()[pri:8, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:01 IST" name="verifyGetAllStatusWithAuthorization" finished-at="2023-12-15T11:05:02 IST" duration-ms="418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllStatusWithAuthorization -->
        <test-method signature="updateStatusWithAuthorization()[pri:9, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:02 IST" name="updateStatusWithAuthorization" finished-at="2023-12-15T11:05:02 IST" duration-ms="437" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusWithAuthorization -->
        <test-method signature="updateStatusWithoutGivingStatusId()[pri:10, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:02 IST" name="updateStatusWithoutGivingStatusId" finished-at="2023-12-15T11:05:03 IST" duration-ms="410" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusWithoutGivingStatusId -->
        <test-method signature="updateStatusByGivingNonExistingStatusId()[pri:11, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:03 IST" name="updateStatusByGivingNonExistingStatusId" finished-at="2023-12-15T11:05:03 IST" duration-ms="389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusByGivingNonExistingStatusId -->
        <test-method signature="deleteSingleStatusWithInvalidStatusName()[pri:13, instance:testcases.StatusFolder@142eef62]" started-at="2023-12-15T11:05:03 IST" name="deleteSingleStatusWithInvalidStatusName" finished-at="2023-12-15T11:05:03 IST" duration-ms="415" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleStatusWithInvalidStatusName -->
      </class> <!-- testcases.StatusFolder -->
      <class name="testcases.TagFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="baseURL" finished-at="2023-12-15T11:05:12 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddTagWithoutAuthorization()[pri:1, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="verifyAddTagWithoutAuthorization" finished-at="2023-12-15T11:05:12 IST" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddTagWithoutAuthorization -->
        <test-method signature="verifyGetAllTagWithoutAuthorization()[pri:2, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="verifyGetAllTagWithoutAuthorization" finished-at="2023-12-15T11:05:12 IST" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllTagWithoutAuthorization -->
        <test-method signature="updateTagWithoutAuthorization()[pri:3, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="updateTagWithoutAuthorization" finished-at="2023-12-15T11:05:12 IST" duration-ms="88" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagWithoutAuthorization -->
        <test-method signature="deleteSingleTagWithoutAuthorization()[pri:4, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="deleteSingleTagWithoutAuthorization" finished-at="2023-12-15T11:05:12 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleTagWithoutAuthorization -->
        <test-method signature="verifyAddTagWithAuthorization()[pri:5, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:12 IST" name="verifyAddTagWithAuthorization" finished-at="2023-12-15T11:05:13 IST" duration-ms="781" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid status code expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid status code expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1419)
at org.testng.Assert.assertEquals(Assert.java:1383)
at testcases.TagFolder.deleteSingleTagWithAuthorization(TagFolder.java:320)
at testcases.TagFolder.verifyAddTagWithAuthorization(TagFolder.java:147)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddTagWithAuthorization -->
        <test-method signature="addTagWithSamePayloadAsPrevious()[pri:6, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:13 IST" name="addTagWithSamePayloadAsPrevious" finished-at="2023-12-15T11:05:13 IST" duration-ms="415" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addTagWithSamePayloadAsPrevious -->
        <test-method signature="addTagWithInvalidPayload()[pri:7, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:13 IST" name="addTagWithInvalidPayload" finished-at="2023-12-15T11:05:14 IST" duration-ms="441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addTagWithInvalidPayload -->
        <test-method signature="verifyGetAllTagWithAuthorization()[pri:8, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:14 IST" name="verifyGetAllTagWithAuthorization" finished-at="2023-12-15T11:05:14 IST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllTagWithAuthorization -->
        <test-method signature="updateTagWithAuthorization()[pri:9, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:14 IST" name="updateTagWithAuthorization" finished-at="2023-12-15T11:05:15 IST" duration-ms="391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagWithAuthorization -->
        <test-method signature="updateTagWithoutGivingTagId()[pri:10, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:15 IST" name="updateTagWithoutGivingTagId" finished-at="2023-12-15T11:05:15 IST" duration-ms="397" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagWithoutGivingTagId -->
        <test-method signature="updateTagByGivingNonExistingTagId()[pri:11, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:15 IST" name="updateTagByGivingNonExistingTagId" finished-at="2023-12-15T11:05:15 IST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagByGivingNonExistingTagId -->
        <test-method signature="deleteSingleTagWithInvalidTagName()[pri:13, instance:testcases.TagFolder@56e07a08]" started-at="2023-12-15T11:05:15 IST" name="deleteSingleTagWithInvalidTagName" finished-at="2023-12-15T11:05:16 IST" duration-ms="426" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleTagWithInvalidTagName -->
      </class> <!-- testcases.TagFolder -->
      <class name="testcases.DesignationFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:03 IST" name="baseURL" finished-at="2023-12-15T11:05:03 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddDesignationWithoutAuthorization()[pri:1, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:03 IST" name="verifyAddDesignationWithoutAuthorization" finished-at="2023-12-15T11:05:03 IST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDesignationWithoutAuthorization -->
        <test-method signature="verifyGetAllDesignationWithoutAuthorization()[pri:2, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:04 IST" name="verifyGetAllDesignationWithoutAuthorization" finished-at="2023-12-15T11:05:04 IST" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllDesignationWithoutAuthorization -->
        <test-method signature="updateDesignationWithoutAuthorization()[pri:3, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:04 IST" name="updateDesignationWithoutAuthorization" finished-at="2023-12-15T11:05:04 IST" duration-ms="108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationWithoutAuthorization -->
        <test-method signature="deleteSingleDesignationWithoutAuthorization()[pri:4, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:04 IST" name="deleteSingleDesignationWithoutAuthorization" finished-at="2023-12-15T11:05:04 IST" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleDesignationWithoutAuthorization -->
        <test-method signature="verifyAddDesignationWithAuthorization()[pri:5, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:04 IST" name="verifyAddDesignationWithAuthorization" finished-at="2023-12-15T11:05:05 IST" duration-ms="818" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid status code expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid status code expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1419)
at org.testng.Assert.assertEquals(Assert.java:1383)
at testcases.DesignationFolder.deleteSingleDesignationWithAuthorization(DesignationFolder.java:320)
at testcases.DesignationFolder.verifyAddDesignationWithAuthorization(DesignationFolder.java:147)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDesignationWithAuthorization -->
        <test-method signature="addDesignationWithInvalidPayload()[pri:6, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:05 IST" name="addDesignationWithInvalidPayload" finished-at="2023-12-15T11:05:05 IST" duration-ms="415" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addDesignationWithInvalidPayload -->
        <test-method signature="addDesignationWithSamePayloadAsPrevious()[pri:7, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:05 IST" name="addDesignationWithSamePayloadAsPrevious" finished-at="2023-12-15T11:05:05 IST" duration-ms="425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addDesignationWithSamePayloadAsPrevious -->
        <test-method signature="verifyGetAllDesignationWithAuthorization()[pri:8, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:05 IST" name="verifyGetAllDesignationWithAuthorization" finished-at="2023-12-15T11:05:06 IST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllDesignationWithAuthorization -->
        <test-method signature="updateDesignationWithAuthorization()[pri:9, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:06 IST" name="updateDesignationWithAuthorization" finished-at="2023-12-15T11:05:06 IST" duration-ms="395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationWithAuthorization -->
        <test-method signature="updateDesignationWithoutGivingDesignationId()[pri:10, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:06 IST" name="updateDesignationWithoutGivingDesignationId" finished-at="2023-12-15T11:05:07 IST" duration-ms="433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationWithoutGivingDesignationId -->
        <test-method signature="updateDesignationByGivingNonExistingDesignationId()[pri:11, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:07 IST" name="updateDesignationByGivingNonExistingDesignationId" finished-at="2023-12-15T11:05:07 IST" duration-ms="403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationByGivingNonExistingDesignationId -->
        <test-method signature="deleteSingleDesignationWithInvalidDesignationName()[pri:13, instance:testcases.DesignationFolder@4a9cc6cb]" started-at="2023-12-15T11:05:07 IST" name="deleteSingleDesignationWithInvalidDesignationName" finished-at="2023-12-15T11:05:07 IST" duration-ms="434" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleDesignationWithInvalidDesignationName -->
      </class> <!-- testcases.DesignationFolder -->
      <class name="testcases.ProjectFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:55 IST" name="baseURL" finished-at="2023-12-15T11:04:55 IST" duration-ms="512" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddProjectWithoutAuthorization()[pri:1, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:55 IST" name="verifyAddProjectWithoutAuthorization" finished-at="2023-12-15T11:04:56 IST" duration-ms="1100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddProjectWithoutAuthorization -->
        <test-method signature="verifyGetAllProjectWithoutAuthorization()[pri:2, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:57 IST" name="verifyGetAllProjectWithoutAuthorization" finished-at="2023-12-15T11:04:57 IST" duration-ms="40" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllProjectWithoutAuthorization -->
        <test-method signature="verifyAddProjectWithAuthorization()[pri:3, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:57 IST" name="verifyAddProjectWithAuthorization" finished-at="2023-12-15T11:04:57 IST" duration-ms="577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddProjectWithAuthorization -->
        <test-method signature="addProjectWithSamePayloadAsPrevious()[pri:4, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:57 IST" name="addProjectWithSamePayloadAsPrevious" finished-at="2023-12-15T11:04:58 IST" duration-ms="418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithSamePayloadAsPrevious -->
        <test-method signature="addProjectWithInvalidPayload()[pri:5, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:58 IST" name="addProjectWithInvalidPayload" finished-at="2023-12-15T11:04:59 IST" duration-ms="909" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithInvalidPayload -->
        <test-method signature="addProjectWithoutGivingProjectStartDateInPayload()[pri:6, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:59 IST" name="addProjectWithoutGivingProjectStartDateInPayload" finished-at="2023-12-15T11:04:59 IST" duration-ms="470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithoutGivingProjectStartDateInPayload -->
        <test-method signature="verifyGetAllProjectWithAuthorization()[pri:7, instance:testcases.ProjectFolder@66ea1466]" started-at="2023-12-15T11:04:59 IST" name="verifyGetAllProjectWithAuthorization" finished-at="2023-12-15T11:05:00 IST" duration-ms="550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllProjectWithAuthorization -->
      </class> <!-- testcases.ProjectFolder -->
      <class name="testcases.RoleFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:07 IST" name="baseURL" finished-at="2023-12-15T11:05:07 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddRoleWithoutAuthorization()[pri:1, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:07 IST" name="verifyAddRoleWithoutAuthorization" finished-at="2023-12-15T11:05:07 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRoleWithoutAuthorization -->
        <test-method signature="verifyGetAllRoleWithoutAuthorization()[pri:2, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:07 IST" name="verifyGetAllRoleWithoutAuthorization" finished-at="2023-12-15T11:05:07 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRoleWithoutAuthorization -->
        <test-method signature="updateRoleWithoutAuthorization()[pri:3, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:07 IST" name="updateRoleWithoutAuthorization" finished-at="2023-12-15T11:05:08 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleWithoutAuthorization -->
        <test-method signature="deleteSingleRoleWithoutAuthorization()[pri:4, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:08 IST" name="deleteSingleRoleWithoutAuthorization" finished-at="2023-12-15T11:05:08 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleRoleWithoutAuthorization -->
        <test-method signature="getRoleByLevelWithoutAuthorization()[pri:5, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:08 IST" name="getRoleByLevelWithoutAuthorization" finished-at="2023-12-15T11:05:08 IST" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithoutAuthorization -->
        <test-method signature="verifyAddRoleWithAuthorization()[pri:6, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:08 IST" name="verifyAddRoleWithAuthorization" finished-at="2023-12-15T11:05:08 IST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRoleWithAuthorization -->
        <test-method signature="addRoleWithSamePayloadAsPrevious()[pri:7, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:08 IST" name="addRoleWithSamePayloadAsPrevious" finished-at="2023-12-15T11:05:08 IST" duration-ms="376" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoleWithSamePayloadAsPrevious -->
        <test-method signature="addRoleWithInvalidPayload()[pri:8, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:08 IST" name="addRoleWithInvalidPayload" finished-at="2023-12-15T11:05:09 IST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoleWithInvalidPayload -->
        <test-method signature="verifyGetAllRoleWithAuthorization()[pri:9, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:09 IST" name="verifyGetAllRoleWithAuthorization" finished-at="2023-12-15T11:05:10 IST" duration-ms="775" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRoleWithAuthorization -->
        <test-method signature="updateRoleWithAuthorization()[pri:10, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:10 IST" name="updateRoleWithAuthorization" finished-at="2023-12-15T11:05:10 IST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleWithAuthorization -->
        <test-method signature="updateRoleWithoutGivingRoleId()[pri:11, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:10 IST" name="updateRoleWithoutGivingRoleId" finished-at="2023-12-15T11:05:10 IST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleWithoutGivingRoleId -->
        <test-method signature="updateRoleByGivingNonExistingRoleId()[pri:12, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:10 IST" name="updateRoleByGivingNonExistingRoleId" finished-at="2023-12-15T11:05:11 IST" duration-ms="414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleByGivingNonExistingRoleId -->
        <test-method signature="deleteSingleRoleWithInvalidRoleId()[pri:14, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:11 IST" name="deleteSingleRoleWithInvalidRoleId" finished-at="2023-12-15T11:05:11 IST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleRoleWithInvalidRoleId -->
        <test-method signature="getRoleByLevelWithAuthorization()[pri:15, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:11 IST" name="getRoleByLevelWithAuthorization" finished-at="2023-12-15T11:05:12 IST" duration-ms="370" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid status code expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid status code expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1419)
at org.testng.Assert.assertEquals(Assert.java:1383)
at testcases.RoleFolder.getRoleByLevelWithAuthorization(RoleFolder.java:404)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithAuthorization -->
        <test-method signature="getRoleByLevelWithInvalidRoleLevel()[pri:16, instance:testcases.RoleFolder@5990e6c5]" started-at="2023-12-15T11:05:12 IST" name="getRoleByLevelWithInvalidRoleLevel" finished-at="2023-12-15T11:05:12 IST" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithInvalidRoleLevel -->
      </class> <!-- testcases.RoleFolder -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
