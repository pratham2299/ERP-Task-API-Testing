<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="80" passed="74" failed="6" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-12-16T12:06:51 IST" name="Suite" finished-at="2023-12-16T12:07:23 IST" duration-ms="32120">
    <groups>
    </groups>
    <test started-at="2023-12-16T12:06:51 IST" name="Test" finished-at="2023-12-16T12:07:23 IST" duration-ms="32120">
      <class name="testcases.PriorityFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:18 IST" name="baseURL" finished-at="2023-12-16T12:07:18 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddPriorityWithoutAuthorization()[pri:1, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:18 IST" name="verifyAddPriorityWithoutAuthorization" finished-at="2023-12-16T12:07:18 IST" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddPriorityWithoutAuthorization -->
        <test-method signature="verifyGetAllPriorityWithoutAuthorization()[pri:2, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:18 IST" name="verifyGetAllPriorityWithoutAuthorization" finished-at="2023-12-16T12:07:18 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllPriorityWithoutAuthorization -->
        <test-method signature="updatePriorityWithoutAuthorization()[pri:3, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:18 IST" name="updatePriorityWithoutAuthorization" finished-at="2023-12-16T12:07:18 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithoutAuthorization -->
        <test-method signature="verifyAddPriorityWithAuthorization()[pri:5, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:18 IST" name="verifyAddPriorityWithAuthorization" finished-at="2023-12-16T12:07:19 IST" duration-ms="838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddPriorityWithAuthorization -->
        <test-method signature="addPriorityWithSamePayloadAsPrevious()[pri:6, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:19 IST" name="addPriorityWithSamePayloadAsPrevious" finished-at="2023-12-16T12:07:20 IST" duration-ms="408" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Priority Already Exits] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Priority Already Exits] but found [null]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.PriorityFolder.addPriorityWithSamePayloadAsPrevious(PriorityFolder.java:194)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addPriorityWithSamePayloadAsPrevious -->
        <test-method signature="addPriorityWithInvalidPayload()[pri:7, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:20 IST" name="addPriorityWithInvalidPayload" finished-at="2023-12-16T12:07:20 IST" duration-ms="403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addPriorityWithInvalidPayload -->
        <test-method signature="addStatusWithSamePriorityLevelInPayloadAsPrevious()[pri:8, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:20 IST" name="addStatusWithSamePriorityLevelInPayloadAsPrevious" finished-at="2023-12-16T12:07:21 IST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithSamePriorityLevelInPayloadAsPrevious -->
        <test-method signature="verifyGetAllPriorityWithAuthorization()[pri:9, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:21 IST" name="verifyGetAllPriorityWithAuthorization" finished-at="2023-12-16T12:07:21 IST" duration-ms="854" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllPriorityWithAuthorization -->
        <test-method signature="updatePriorityWithAuthorization(java.lang.Integer)[pri:10, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:21 IST" name="updatePriorityWithAuthorization" finished-at="2023-12-16T12:07:21 IST" depends-on-methods="testcases.PriorityFolder.verifyGetAllPriorityWithAuthorization" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Cannot inject @Test annotated Method [updatePriorityWithAuthorization] with [class java.lang.Integer].
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Cannot inject @Test annotated Method [updatePriorityWithAuthorization] with [class java.lang.Integer].
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at org.testng.internal.Parameters.checkParameterTypes(Parameters.java:436)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:350)
at org.testng.internal.Parameters.createParameters(Parameters.java:693)
at org.testng.internal.Parameters.handleParameters(Parameters.java:879)
at org.testng.internal.Parameters.handleParameters(Parameters.java:728)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:72)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:51)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:911)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithAuthorization -->
        <test-method signature="updatePriorityWithoutGivingPriorityId()[pri:11, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:21 IST" name="updatePriorityWithoutGivingPriorityId" finished-at="2023-12-16T12:07:22 IST" duration-ms="509" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityWithoutGivingPriorityId -->
        <test-method signature="updatePriorityByGivingNonExistingPriorityId()[pri:12, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:22 IST" name="updatePriorityByGivingNonExistingPriorityId" finished-at="2023-12-16T12:07:22 IST" duration-ms="463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatePriorityByGivingNonExistingPriorityId -->
        <test-method signature="deleteSinglePriorityWithInvalidPriorityName()[pri:14, instance:testcases.PriorityFolder@21694e53]" started-at="2023-12-16T12:07:22 IST" name="deleteSinglePriorityWithInvalidPriorityName" finished-at="2023-12-16T12:07:23 IST" duration-ms="422" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSinglePriorityWithInvalidPriorityName -->
      </class> <!-- testcases.PriorityFolder -->
      <class name="testcases.StatusFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="baseURL" finished-at="2023-12-16T12:06:56 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddStatusWithoutAuthorization()[pri:1, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="verifyAddStatusWithoutAuthorization" finished-at="2023-12-16T12:06:56 IST" duration-ms="45" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddStatusWithoutAuthorization -->
        <test-method signature="verifyGetAllStatusWithoutAuthorization()[pri:2, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="verifyGetAllStatusWithoutAuthorization" finished-at="2023-12-16T12:06:56 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllStatusWithoutAuthorization -->
        <test-method signature="verifyUpdateStatusWithoutAuthorization()[pri:3, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="verifyUpdateStatusWithoutAuthorization" finished-at="2023-12-16T12:06:56 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdateStatusWithoutAuthorization -->
        <test-method signature="deleteSingleStatusWithoutAuthorization()[pri:4, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="deleteSingleStatusWithoutAuthorization" finished-at="2023-12-16T12:06:56 IST" duration-ms="42" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleStatusWithoutAuthorization -->
        <test-method signature="verifyAddStatusWithAuthorization()[pri:5, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:56 IST" name="verifyAddStatusWithAuthorization" finished-at="2023-12-16T12:06:57 IST" duration-ms="984" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddStatusWithAuthorization -->
        <test-method signature="addStatusWithSamePayloadAsPrevious()[pri:6, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:57 IST" name="addStatusWithSamePayloadAsPrevious" finished-at="2023-12-16T12:06:58 IST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithSamePayloadAsPrevious -->
        <test-method signature="addStatusWithInvalidPayload()[pri:7, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:58 IST" name="addStatusWithInvalidPayload" finished-at="2023-12-16T12:06:58 IST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithInvalidPayload -->
        <test-method signature="addStatusWithSameStatusLevelInPayloadAsPrevious()[pri:8, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:58 IST" name="addStatusWithSameStatusLevelInPayloadAsPrevious" finished-at="2023-12-16T12:06:58 IST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addStatusWithSameStatusLevelInPayloadAsPrevious -->
        <test-method signature="verifyGetAllStatusWithAuthorization()[pri:9, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:58 IST" name="verifyGetAllStatusWithAuthorization" finished-at="2023-12-16T12:06:59 IST" duration-ms="797" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllStatusWithAuthorization -->
        <test-method signature="updateStatusWithoutGivingStatusId()[pri:11, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:06:59 IST" name="updateStatusWithoutGivingStatusId" finished-at="2023-12-16T12:07:00 IST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusWithoutGivingStatusId -->
        <test-method signature="updateStatusByGivingNonExistingStatusId()[pri:12, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:07:00 IST" name="updateStatusByGivingNonExistingStatusId" finished-at="2023-12-16T12:07:00 IST" duration-ms="476" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusByGivingNonExistingStatusId -->
        <test-method signature="deleteSingleStatusWithInvalidStatusName()[pri:14, instance:testcases.StatusFolder@64da2a7]" started-at="2023-12-16T12:07:00 IST" name="deleteSingleStatusWithInvalidStatusName" finished-at="2023-12-16T12:07:00 IST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleStatusWithInvalidStatusName -->
      </class> <!-- testcases.StatusFolder -->
      <class name="testcases.TagFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="baseURL" finished-at="2023-12-16T12:07:14 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddTagWithoutAuthorization()[pri:1, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="verifyAddTagWithoutAuthorization" finished-at="2023-12-16T12:07:14 IST" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddTagWithoutAuthorization -->
        <test-method signature="verifyGetAllTagWithoutAuthorization()[pri:2, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="verifyGetAllTagWithoutAuthorization" finished-at="2023-12-16T12:07:14 IST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllTagWithoutAuthorization -->
        <test-method signature="updateTagWithoutAuthorization()[pri:3, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="updateTagWithoutAuthorization" finished-at="2023-12-16T12:07:14 IST" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagWithoutAuthorization -->
        <test-method signature="deleteSingleTagWithoutAuthorization()[pri:4, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="deleteSingleTagWithoutAuthorization" finished-at="2023-12-16T12:07:14 IST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleTagWithoutAuthorization -->
        <test-method signature="verifyAddTagWithAuthorization()[pri:5, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:14 IST" name="verifyAddTagWithAuthorization" finished-at="2023-12-16T12:07:15 IST" duration-ms="847" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddTagWithAuthorization -->
        <test-method signature="addTagWithSamePayloadAsPrevious()[pri:6, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:15 IST" name="addTagWithSamePayloadAsPrevious" finished-at="2023-12-16T12:07:16 IST" duration-ms="505" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Tag Already Exists] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Tag Already Exists] but found [null]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.TagFolder.addTagWithSamePayloadAsPrevious(TagFolder.java:186)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addTagWithSamePayloadAsPrevious -->
        <test-method signature="addTagWithInvalidPayload()[pri:7, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:16 IST" name="addTagWithInvalidPayload" finished-at="2023-12-16T12:07:16 IST" duration-ms="414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addTagWithInvalidPayload -->
        <test-method signature="verifyGetAllTagWithAuthorization()[pri:8, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:16 IST" name="verifyGetAllTagWithAuthorization" finished-at="2023-12-16T12:07:17 IST" duration-ms="913" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllTagWithAuthorization -->
        <test-method signature="updateTagWithoutGivingTagId()[pri:10, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:17 IST" name="updateTagWithoutGivingTagId" finished-at="2023-12-16T12:07:18 IST" duration-ms="466" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagWithoutGivingTagId -->
        <test-method signature="updateTagByGivingNonExistingTagId()[pri:11, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:18 IST" name="updateTagByGivingNonExistingTagId" finished-at="2023-12-16T12:07:18 IST" duration-ms="420" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateTagByGivingNonExistingTagId -->
        <test-method signature="deleteSingleTagWithInvalidTagName()[pri:13, instance:testcases.TagFolder@47428937]" started-at="2023-12-16T12:07:18 IST" name="deleteSingleTagWithInvalidTagName" finished-at="2023-12-16T12:07:18 IST" duration-ms="428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleTagWithInvalidTagName -->
      </class> <!-- testcases.TagFolder -->
      <class name="testcases.DesignationFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:00 IST" name="baseURL" finished-at="2023-12-16T12:07:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddDesignationWithoutAuthorization()[pri:1, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:00 IST" name="verifyAddDesignationWithoutAuthorization" finished-at="2023-12-16T12:07:00 IST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDesignationWithoutAuthorization -->
        <test-method signature="verifyGetAllDesignationWithoutAuthorization()[pri:2, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:00 IST" name="verifyGetAllDesignationWithoutAuthorization" finished-at="2023-12-16T12:07:00 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllDesignationWithoutAuthorization -->
        <test-method signature="updateDesignationWithoutAuthorization()[pri:3, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:00 IST" name="updateDesignationWithoutAuthorization" finished-at="2023-12-16T12:07:00 IST" duration-ms="56" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationWithoutAuthorization -->
        <test-method signature="deleteSingleDesignationWithoutAuthorization()[pri:4, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:00 IST" name="deleteSingleDesignationWithoutAuthorization" finished-at="2023-12-16T12:07:01 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleDesignationWithoutAuthorization -->
        <test-method signature="verifyAddDesignationWithAuthorization()[pri:5, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:01 IST" name="verifyAddDesignationWithAuthorization" finished-at="2023-12-16T12:07:01 IST" duration-ms="890" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDesignationWithAuthorization -->
        <test-method signature="addDesignationWithInvalidPayload()[pri:6, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:01 IST" name="addDesignationWithInvalidPayload" finished-at="2023-12-16T12:07:02 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addDesignationWithInvalidPayload -->
        <test-method signature="addDesignationWithSamePayloadAsPrevious()[pri:7, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:02 IST" name="addDesignationWithSamePayloadAsPrevious" finished-at="2023-12-16T12:07:02 IST" duration-ms="413" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Designation Already Exits] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Designation Already Exits] but found [null]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.DesignationFolder.addDesignationWithSamePayloadAsPrevious(DesignationFolder.java:212)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addDesignationWithSamePayloadAsPrevious -->
        <test-method signature="verifyGetAllDesignationWithAuthorization()[pri:8, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:02 IST" name="verifyGetAllDesignationWithAuthorization" finished-at="2023-12-16T12:07:03 IST" duration-ms="1016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllDesignationWithAuthorization -->
        <test-method signature="updateDesignationWithoutGivingDesignationId()[pri:10, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:03 IST" name="updateDesignationWithoutGivingDesignationId" finished-at="2023-12-16T12:07:04 IST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationWithoutGivingDesignationId -->
        <test-method signature="updateDesignationByGivingNonExistingDesignationId()[pri:11, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:04 IST" name="updateDesignationByGivingNonExistingDesignationId" finished-at="2023-12-16T12:07:04 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateDesignationByGivingNonExistingDesignationId -->
        <test-method signature="deleteSingleDesignationWithInvalidDesignationName()[pri:13, instance:testcases.DesignationFolder@46074492]" started-at="2023-12-16T12:07:04 IST" name="deleteSingleDesignationWithInvalidDesignationName" finished-at="2023-12-16T12:07:04 IST" duration-ms="411" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleDesignationWithInvalidDesignationName -->
      </class> <!-- testcases.DesignationFolder -->
      <class name="testcases.ProjectFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:51 IST" name="baseURL" finished-at="2023-12-16T12:06:51 IST" duration-ms="511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddProjectWithoutAuthorization()[pri:1, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:51 IST" name="verifyAddProjectWithoutAuthorization" finished-at="2023-12-16T12:06:52 IST" duration-ms="1013" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddProjectWithoutAuthorization -->
        <test-method signature="verifyGetAllProjectWithoutAuthorization()[pri:2, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:52 IST" name="verifyGetAllProjectWithoutAuthorization" finished-at="2023-12-16T12:06:52 IST" duration-ms="56" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllProjectWithoutAuthorization -->
        <test-method signature="verifyAddProjectWithAuthorization()[pri:3, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:52 IST" name="verifyAddProjectWithAuthorization" finished-at="2023-12-16T12:06:53 IST" duration-ms="723" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddProjectWithAuthorization -->
        <test-method signature="addProjectWithSamePayloadAsPrevious()[pri:4, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:53 IST" name="addProjectWithSamePayloadAsPrevious" finished-at="2023-12-16T12:06:54 IST" duration-ms="686" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithSamePayloadAsPrevious -->
        <test-method signature="addProjectWithInvalidPayload()[pri:5, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:54 IST" name="addProjectWithInvalidPayload" finished-at="2023-12-16T12:06:55 IST" duration-ms="1299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithInvalidPayload -->
        <test-method signature="addProjectWithoutGivingProjectStartDateInPayload()[pri:6, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:55 IST" name="addProjectWithoutGivingProjectStartDateInPayload" finished-at="2023-12-16T12:06:56 IST" duration-ms="390" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addProjectWithoutGivingProjectStartDateInPayload -->
        <test-method signature="verifyGetAllProjectWithAuthorization()[pri:7, instance:testcases.ProjectFolder@f415a95]" started-at="2023-12-16T12:06:56 IST" name="verifyGetAllProjectWithAuthorization" finished-at="2023-12-16T12:06:56 IST" duration-ms="456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllProjectWithAuthorization -->
      </class> <!-- testcases.ProjectFolder -->
      <class name="testcases.RegularTaskFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:04 IST" name="baseURL" finished-at="2023-12-16T12:07:04 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddRegularTaskWithoutAuthorization()[pri:1, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:04 IST" name="verifyAddRegularTaskWithoutAuthorization" finished-at="2023-12-16T12:07:04 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRegularTaskWithoutAuthorization -->
        <test-method signature="verifyGetAllRegularTaskForEmployeeWithoutAuthorization()[pri:2, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:04 IST" name="verifyGetAllRegularTaskForEmployeeWithoutAuthorization" finished-at="2023-12-16T12:07:05 IST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRegularTaskForEmployeeWithoutAuthorization -->
        <test-method signature="verifyUpdateRegularTaskWithoutAuthorization()[pri:3, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:05 IST" name="verifyUpdateRegularTaskWithoutAuthorization" finished-at="2023-12-16T12:07:05 IST" duration-ms="27" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUpdateRegularTaskWithoutAuthorization -->
        <test-method signature="deleteSingleStatusWithoutAuthorization()[pri:4, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:05 IST" name="deleteSingleStatusWithoutAuthorization" finished-at="2023-12-16T12:07:05 IST" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleStatusWithoutAuthorization -->
        <test-method signature="verifyAddRegularTaskWithAuthorization()[pri:5, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:05 IST" name="verifyAddRegularTaskWithAuthorization" finished-at="2023-12-16T12:07:05 IST" duration-ms="877" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRegularTaskWithAuthorization -->
        <test-method signature="addRegularTaskWithSamePayloadAsPrevious()[pri:6, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:05 IST" name="addRegularTaskWithSamePayloadAsPrevious" finished-at="2023-12-16T12:07:06 IST" duration-ms="459" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRegularTaskWithSamePayloadAsPrevious -->
        <test-method signature="addRegularTaskWithInvalidPayload()[pri:7, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:06 IST" name="addRegularTaskWithInvalidPayload" finished-at="2023-12-16T12:07:07 IST" duration-ms="607" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRegularTaskWithInvalidPayload -->
        <test-method signature="verifyGetAllRegularTaskWithAuthorization()[pri:8, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:07 IST" name="verifyGetAllRegularTaskWithAuthorization" finished-at="2023-12-16T12:07:07 IST" duration-ms="793" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRegularTaskWithAuthorization -->
        <test-method signature="verifyGetAllRegularTaskWithInvalidEmployeeId()[pri:8, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:07 IST" name="verifyGetAllRegularTaskWithInvalidEmployeeId" finished-at="2023-12-16T12:07:08 IST" duration-ms="439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRegularTaskWithInvalidEmployeeId -->
        <test-method signature="updateStatusWithoutGivingRegularTaskId()[pri:11, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:08 IST" name="updateStatusWithoutGivingRegularTaskId" finished-at="2023-12-16T12:07:08 IST" duration-ms="405" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusWithoutGivingRegularTaskId -->
        <test-method signature="updateStatusByGivingNonExistingRegularTaskId()[pri:12, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:08 IST" name="updateStatusByGivingNonExistingRegularTaskId" finished-at="2023-12-16T12:07:09 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateStatusByGivingNonExistingRegularTaskId -->
        <test-method signature="deleteSingleRegularTaskWithInvalidRegularTaskId()[pri:14, instance:testcases.RegularTaskFolder@d78795]" started-at="2023-12-16T12:07:09 IST" name="deleteSingleRegularTaskWithInvalidRegularTaskId" finished-at="2023-12-16T12:07:09 IST" duration-ms="410" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleRegularTaskWithInvalidRegularTaskId -->
      </class> <!-- testcases.RegularTaskFolder -->
      <class name="testcases.RoleFolder">
        <test-method is-config="true" signature="baseURL()[pri:0, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="baseURL" finished-at="2023-12-16T12:07:09 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseURL -->
        <test-method signature="verifyAddRoleWithoutAuthorization()[pri:1, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="verifyAddRoleWithoutAuthorization" finished-at="2023-12-16T12:07:09 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRoleWithoutAuthorization -->
        <test-method signature="verifyGetAllRoleWithoutAuthorization()[pri:2, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="verifyGetAllRoleWithoutAuthorization" finished-at="2023-12-16T12:07:09 IST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRoleWithoutAuthorization -->
        <test-method signature="updateRoleWithoutAuthorization()[pri:3, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="updateRoleWithoutAuthorization" finished-at="2023-12-16T12:07:09 IST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleWithoutAuthorization -->
        <test-method signature="deleteSingleRoleWithoutAuthorization()[pri:4, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="deleteSingleRoleWithoutAuthorization" finished-at="2023-12-16T12:07:09 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleRoleWithoutAuthorization -->
        <test-method signature="getRoleByLevelWithoutAuthorization()[pri:5, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="getRoleByLevelWithoutAuthorization" finished-at="2023-12-16T12:07:09 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithoutAuthorization -->
        <test-method signature="verifyAddRoleWithAuthorization()[pri:6, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:09 IST" name="verifyAddRoleWithAuthorization" finished-at="2023-12-16T12:07:10 IST" duration-ms="894" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddRoleWithAuthorization -->
        <test-method signature="addRoleWithSamePayloadAsPrevious()[pri:7, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:10 IST" name="addRoleWithSamePayloadAsPrevious" finished-at="2023-12-16T12:07:10 IST" duration-ms="378" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Role Already Exists] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Role Already Exists] but found [null]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.RoleFolder.addRoleWithSamePayloadAsPrevious(RoleFolder.java:205)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoleWithSamePayloadAsPrevious -->
        <test-method signature="addRoleWithInvalidPayload()[pri:8, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:10 IST" name="addRoleWithInvalidPayload" finished-at="2023-12-16T12:07:11 IST" duration-ms="438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoleWithInvalidPayload -->
        <test-method signature="addRoleWithSameRoleLevelInPayloadAsPrevious()[pri:9, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:11 IST" name="addRoleWithSameRoleLevelInPayloadAsPrevious" finished-at="2023-12-16T12:07:11 IST" duration-ms="379" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Role Already Exists] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Role Already Exists] but found [null]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at testcases.RoleFolder.addRoleWithSameRoleLevelInPayloadAsPrevious(RoleFolder.java:257)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addRoleWithSameRoleLevelInPayloadAsPrevious -->
        <test-method signature="verifyGetAllRoleWithAuthorization()[pri:10, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:11 IST" name="verifyGetAllRoleWithAuthorization" finished-at="2023-12-16T12:07:12 IST" duration-ms="863" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllRoleWithAuthorization -->
        <test-method signature="updateRoleWithoutGivingRoleId()[pri:12, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:12 IST" name="updateRoleWithoutGivingRoleId" finished-at="2023-12-16T12:07:12 IST" duration-ms="368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleWithoutGivingRoleId -->
        <test-method signature="updateRoleByGivingNonExistingRoleId()[pri:13, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:12 IST" name="updateRoleByGivingNonExistingRoleId" finished-at="2023-12-16T12:07:13 IST" duration-ms="433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateRoleByGivingNonExistingRoleId -->
        <test-method signature="deleteSingleRoleWithInvalidRoleId()[pri:15, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:13 IST" name="deleteSingleRoleWithInvalidRoleId" finished-at="2023-12-16T12:07:13 IST" duration-ms="561" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteSingleRoleWithInvalidRoleId -->
        <test-method signature="getRoleByLevelWithAuthorization()[pri:16, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:13 IST" name="getRoleByLevelWithAuthorization" finished-at="2023-12-16T12:07:14 IST" duration-ms="450" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithAuthorization -->
        <test-method signature="getRoleByLevelWithInvalidRoleLevel()[pri:17, instance:testcases.RoleFolder@2c715e84]" started-at="2023-12-16T12:07:14 IST" name="getRoleByLevelWithInvalidRoleLevel" finished-at="2023-12-16T12:07:14 IST" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRoleByLevelWithInvalidRoleLevel -->
      </class> <!-- testcases.RoleFolder -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
