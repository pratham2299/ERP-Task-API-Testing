<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="DESKTOP-BG83L86" failures="6" tests="80" name="Test" time="32.12" errors="0" timestamp="2023-12-16T12:07:23 IST">
  <testcase classname="testcases.ProjectFolder" name="verifyAddProjectWithoutAuthorization" time="1.013"/>
  <testcase classname="testcases.ProjectFolder" name="verifyGetAllProjectWithoutAuthorization" time="0.056"/>
  <testcase classname="testcases.ProjectFolder" name="verifyAddProjectWithAuthorization" time="0.723"/>
  <testcase classname="testcases.ProjectFolder" name="addProjectWithSamePayloadAsPrevious" time="0.686"/>
  <testcase classname="testcases.ProjectFolder" name="addProjectWithInvalidPayload" time="1.299"/>
  <testcase classname="testcases.ProjectFolder" name="addProjectWithoutGivingProjectStartDateInPayload" time="0.39"/>
  <testcase classname="testcases.ProjectFolder" name="verifyGetAllProjectWithAuthorization" time="0.456"/>
  <testcase classname="testcases.StatusFolder" name="verifyAddStatusWithoutAuthorization" time="0.045"/>
  <testcase classname="testcases.StatusFolder" name="verifyGetAllStatusWithoutAuthorization" time="0.026"/>
  <testcase classname="testcases.StatusFolder" name="verifyUpdateStatusWithoutAuthorization" time="0.028"/>
  <testcase classname="testcases.StatusFolder" name="deleteSingleStatusWithoutAuthorization" time="0.042"/>
  <testcase classname="testcases.StatusFolder" name="verifyAddStatusWithAuthorization" time="0.984"/>
  <testcase classname="testcases.StatusFolder" name="addStatusWithSamePayloadAsPrevious" time="0.402"/>
  <testcase classname="testcases.StatusFolder" name="addStatusWithInvalidPayload" time="0.402"/>
  <testcase classname="testcases.StatusFolder" name="addStatusWithSameStatusLevelInPayloadAsPrevious" time="0.409"/>
  <testcase classname="testcases.StatusFolder" name="verifyGetAllStatusWithAuthorization" time="0.797"/>
  <testcase classname="testcases.StatusFolder" name="updateStatusWithoutGivingStatusId" time="0.373"/>
  <testcase classname="testcases.StatusFolder" name="updateStatusByGivingNonExistingStatusId" time="0.476"/>
  <testcase classname="testcases.StatusFolder" name="deleteSingleStatusWithInvalidStatusName" time="0.384"/>
  <testcase classname="testcases.DesignationFolder" name="verifyAddDesignationWithoutAuthorization" time="0.023"/>
  <testcase classname="testcases.DesignationFolder" name="verifyGetAllDesignationWithoutAuthorization" time="0.021"/>
  <testcase classname="testcases.DesignationFolder" name="updateDesignationWithoutAuthorization" time="0.056"/>
  <testcase classname="testcases.DesignationFolder" name="deleteSingleDesignationWithoutAuthorization" time="0.026"/>
  <testcase classname="testcases.DesignationFolder" name="verifyAddDesignationWithAuthorization" time="0.89"/>
  <testcase classname="testcases.DesignationFolder" name="addDesignationWithInvalidPayload" time="0.401"/>
  <testcase classname="testcases.DesignationFolder" name="addDesignationWithSamePayloadAsPrevious" time="0.413">
    <failure type="java.lang.AssertionError" message="expected [Designation Already Exits] but found [null]">
      <![CDATA[java.lang.AssertionError: expected [Designation Already Exits] but found [null]
at testcases.DesignationFolder.addDesignationWithSamePayloadAsPrevious(DesignationFolder.java:212)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- addDesignationWithSamePayloadAsPrevious -->
  <testcase classname="testcases.DesignationFolder" name="verifyGetAllDesignationWithAuthorization" time="1.016"/>
  <testcase classname="testcases.DesignationFolder" name="updateDesignationWithoutGivingDesignationId" time="0.409"/>
  <testcase classname="testcases.DesignationFolder" name="updateDesignationByGivingNonExistingDesignationId" time="0.401"/>
  <testcase classname="testcases.DesignationFolder" name="deleteSingleDesignationWithInvalidDesignationName" time="0.411"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyAddRegularTaskWithoutAuthorization" time="0.026"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyGetAllRegularTaskForEmployeeWithoutAuthorization" time="0.017"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyUpdateRegularTaskWithoutAuthorization" time="0.027"/>
  <testcase classname="testcases.RegularTaskFolder" name="deleteSingleStatusWithoutAuthorization" time="0.019"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyAddRegularTaskWithAuthorization" time="0.877"/>
  <testcase classname="testcases.RegularTaskFolder" name="addRegularTaskWithSamePayloadAsPrevious" time="0.459"/>
  <testcase classname="testcases.RegularTaskFolder" name="addRegularTaskWithInvalidPayload" time="0.607"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyGetAllRegularTaskWithAuthorization" time="0.793"/>
  <testcase classname="testcases.RegularTaskFolder" name="verifyGetAllRegularTaskWithInvalidEmployeeId" time="0.439"/>
  <testcase classname="testcases.RegularTaskFolder" name="updateStatusWithoutGivingRegularTaskId" time="0.405"/>
  <testcase classname="testcases.RegularTaskFolder" name="updateStatusByGivingNonExistingRegularTaskId" time="0.401"/>
  <testcase classname="testcases.RegularTaskFolder" name="deleteSingleRegularTaskWithInvalidRegularTaskId" time="0.41"/>
  <testcase classname="testcases.RoleFolder" name="verifyAddRoleWithoutAuthorization" time="0.021"/>
  <testcase classname="testcases.RoleFolder" name="verifyGetAllRoleWithoutAuthorization" time="0.023"/>
  <testcase classname="testcases.RoleFolder" name="updateRoleWithoutAuthorization" time="0.023"/>
  <testcase classname="testcases.RoleFolder" name="deleteSingleRoleWithoutAuthorization" time="0.02"/>
  <testcase classname="testcases.RoleFolder" name="getRoleByLevelWithoutAuthorization" time="0.02"/>
  <testcase classname="testcases.RoleFolder" name="verifyAddRoleWithAuthorization" time="0.894"/>
  <testcase classname="testcases.RoleFolder" name="addRoleWithSamePayloadAsPrevious" time="0.378">
    <failure type="java.lang.AssertionError" message="expected [Role Already Exists] but found [null]">
      <![CDATA[java.lang.AssertionError: expected [Role Already Exists] but found [null]
at testcases.RoleFolder.addRoleWithSamePayloadAsPrevious(RoleFolder.java:205)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- addRoleWithSamePayloadAsPrevious -->
  <testcase classname="testcases.RoleFolder" name="addRoleWithInvalidPayload" time="0.438"/>
  <testcase classname="testcases.RoleFolder" name="addRoleWithSameRoleLevelInPayloadAsPrevious" time="0.379">
    <failure type="java.lang.AssertionError" message="expected [Role Already Exists] but found [null]">
      <![CDATA[java.lang.AssertionError: expected [Role Already Exists] but found [null]
at testcases.RoleFolder.addRoleWithSameRoleLevelInPayloadAsPrevious(RoleFolder.java:257)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- addRoleWithSameRoleLevelInPayloadAsPrevious -->
  <testcase classname="testcases.RoleFolder" name="verifyGetAllRoleWithAuthorization" time="0.863"/>
  <testcase classname="testcases.RoleFolder" name="updateRoleWithoutGivingRoleId" time="0.368"/>
  <testcase classname="testcases.RoleFolder" name="updateRoleByGivingNonExistingRoleId" time="0.433"/>
  <testcase classname="testcases.RoleFolder" name="deleteSingleRoleWithInvalidRoleId" time="0.561"/>
  <testcase classname="testcases.RoleFolder" name="getRoleByLevelWithAuthorization" time="0.45"/>
  <testcase classname="testcases.RoleFolder" name="getRoleByLevelWithInvalidRoleLevel" time="0.408"/>
  <testcase classname="testcases.TagFolder" name="verifyAddTagWithoutAuthorization" time="0.015"/>
  <testcase classname="testcases.TagFolder" name="verifyGetAllTagWithoutAuthorization" time="0.017"/>
  <testcase classname="testcases.TagFolder" name="updateTagWithoutAuthorization" time="0.022"/>
  <testcase classname="testcases.TagFolder" name="deleteSingleTagWithoutAuthorization" time="0.023"/>
  <testcase classname="testcases.TagFolder" name="verifyAddTagWithAuthorization" time="0.847"/>
  <testcase classname="testcases.TagFolder" name="addTagWithSamePayloadAsPrevious" time="0.505">
    <failure type="java.lang.AssertionError" message="expected [Tag Already Exists] but found [null]">
      <![CDATA[java.lang.AssertionError: expected [Tag Already Exists] but found [null]
at testcases.TagFolder.addTagWithSamePayloadAsPrevious(TagFolder.java:186)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- addTagWithSamePayloadAsPrevious -->
  <testcase classname="testcases.TagFolder" name="addTagWithInvalidPayload" time="0.414"/>
  <testcase classname="testcases.TagFolder" name="verifyGetAllTagWithAuthorization" time="0.913"/>
  <testcase classname="testcases.TagFolder" name="updateTagWithoutGivingTagId" time="0.466"/>
  <testcase classname="testcases.TagFolder" name="updateTagByGivingNonExistingTagId" time="0.42"/>
  <testcase classname="testcases.TagFolder" name="deleteSingleTagWithInvalidTagName" time="0.428"/>
  <testcase classname="testcases.PriorityFolder" name="verifyAddPriorityWithoutAuthorization" time="0.022"/>
  <testcase classname="testcases.PriorityFolder" name="verifyGetAllPriorityWithoutAuthorization" time="0.02"/>
  <testcase classname="testcases.PriorityFolder" name="updatePriorityWithoutAuthorization" time="0.026"/>
  <testcase classname="testcases.PriorityFolder" name="verifyAddPriorityWithAuthorization" time="0.838"/>
  <testcase classname="testcases.PriorityFolder" name="addPriorityWithSamePayloadAsPrevious" time="0.408">
    <failure type="java.lang.AssertionError" message="expected [Priority Already Exits] but found [null]">
      <![CDATA[java.lang.AssertionError: expected [Priority Already Exits] but found [null]
at testcases.PriorityFolder.addPriorityWithSamePayloadAsPrevious(PriorityFolder.java:194)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- addPriorityWithSamePayloadAsPrevious -->
  <testcase classname="testcases.PriorityFolder" name="addPriorityWithInvalidPayload" time="0.403"/>
  <testcase classname="testcases.PriorityFolder" name="addStatusWithSamePriorityLevelInPayloadAsPrevious" time="0.384"/>
  <testcase classname="testcases.PriorityFolder" name="verifyGetAllPriorityWithAuthorization" time="0.854"/>
  <testcase classname="testcases.PriorityFolder" name="updatePriorityWithAuthorization" time="0.0">
    <failure type="org.testng.TestNGException" message="
Cannot inject @Test annotated Method [updatePriorityWithAuthorization] with [class java.lang.Integer].
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Cannot inject @Test annotated Method [updatePriorityWithAuthorization] with [class java.lang.Integer].
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 30 stack frames]]>
    </failure>
  </testcase> <!-- updatePriorityWithAuthorization -->
  <testcase classname="testcases.PriorityFolder" name="updatePriorityWithoutGivingPriorityId" time="0.509"/>
  <testcase classname="testcases.PriorityFolder" name="updatePriorityByGivingNonExistingPriorityId" time="0.463"/>
  <testcase classname="testcases.PriorityFolder" name="deleteSinglePriorityWithInvalidPriorityName" time="0.422"/>
</testsuite> <!-- Test -->
